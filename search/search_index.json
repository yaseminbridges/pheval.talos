{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Introduction Welcome to pheval_talos's documentation!","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#introduction","text":"Welcome to pheval_talos's documentation!","title":"Introduction"},{"location":"api/pheval_talos/cli/","text":"main CLI for pheval.talos. :param verbose: Verbosity while running. :param quiet: Boolean to be quiet or verbose. Usage: main [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --verbose integer range ( 0 and above) N/A 0 -q , --quiet text N/A None --version boolean Show the version and exit. False --help boolean Show this message and exit. False Subcommands run : Run the pheval.talos's demo command. run Run the pheval.talos's demo command. Usage: main run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False run Run the pheval.talos's demo command. Usage: run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"Cli"},{"location":"api/pheval_talos/cli/#main","text":"CLI for pheval.talos. :param verbose: Verbosity while running. :param quiet: Boolean to be quiet or verbose. Usage: main [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --verbose integer range ( 0 and above) N/A 0 -q , --quiet text N/A None --version boolean Show the version and exit. False --help boolean Show this message and exit. False Subcommands run : Run the pheval.talos's demo command.","title":"main"},{"location":"api/pheval_talos/cli/#run","text":"Run the pheval.talos's demo command. Usage: main run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run"},{"location":"api/pheval_talos/cli/#run_1","text":"Run the pheval.talos's demo command. Usage: run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run"},{"location":"api/pheval_talos/main/","text":"Main python file. demo () Define API. Source code in src/pheval_talos/main.py 4 5 6 def demo (): \"\"\"Define API.\"\"\" print ( \"Hello, World!\" )","title":"Main"},{"location":"api/pheval_talos/main/#src.pheval_talos.main.demo","text":"Define API. Source code in src/pheval_talos/main.py 4 5 6 def demo (): \"\"\"Define API.\"\"\" print ( \"Hello, World!\" )","title":"demo"},{"location":"api/pheval_talos/runner/","text":"Runner. TalosPhEvalRunner dataclass Bases: PhEvalRunner Runner class implementation. Source code in src/pheval_talos/runner.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @dataclass class TalosPhEvalRunner ( PhEvalRunner ): \"\"\"Runner class implementation.\"\"\" input_dir : Path testdata_dir : Path tmp_dir : Path output_dir : Path config_file : Path version : str def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) prepare_for_talos ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , output_dir = self . output_dir , raw_results_dir = self . raw_results_dir , ) def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) configurations = TALOSConfigurations . model_validate ( self . input_dir_config . tool_specific_configuration_options ) run_pipeline_per_sample ( input_dir = self . input_dir , testdata_dir = self . testdata_dir , raw_results_dir = self . raw_results_dir , apptainer = configurations . apptainer ) def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) post_process () Post Process. Source code in src/pheval_talos/runner.py 41 42 43 def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) prepare () Prepare. Source code in src/pheval_talos/runner.py 24 25 26 27 28 29 30 31 32 def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) prepare_for_talos ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , output_dir = self . output_dir , raw_results_dir = self . raw_results_dir , ) run () Run. Source code in src/pheval_talos/runner.py 34 35 36 37 38 39 def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) configurations = TALOSConfigurations . model_validate ( self . input_dir_config . tool_specific_configuration_options ) run_pipeline_per_sample ( input_dir = self . input_dir , testdata_dir = self . testdata_dir , raw_results_dir = self . raw_results_dir , apptainer = configurations . apptainer )","title":"Runner"},{"location":"api/pheval_talos/runner/#src.pheval_talos.runner.TalosPhEvalRunner","text":"Bases: PhEvalRunner Runner class implementation. Source code in src/pheval_talos/runner.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @dataclass class TalosPhEvalRunner ( PhEvalRunner ): \"\"\"Runner class implementation.\"\"\" input_dir : Path testdata_dir : Path tmp_dir : Path output_dir : Path config_file : Path version : str def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) prepare_for_talos ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , output_dir = self . output_dir , raw_results_dir = self . raw_results_dir , ) def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) configurations = TALOSConfigurations . model_validate ( self . input_dir_config . tool_specific_configuration_options ) run_pipeline_per_sample ( input_dir = self . input_dir , testdata_dir = self . testdata_dir , raw_results_dir = self . raw_results_dir , apptainer = configurations . apptainer ) def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" )","title":"TalosPhEvalRunner"},{"location":"api/pheval_talos/runner/#src.pheval_talos.runner.TalosPhEvalRunner.post_process","text":"Post Process. Source code in src/pheval_talos/runner.py 41 42 43 def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" )","title":"post_process"},{"location":"api/pheval_talos/runner/#src.pheval_talos.runner.TalosPhEvalRunner.prepare","text":"Prepare. Source code in src/pheval_talos/runner.py 24 25 26 27 28 29 30 31 32 def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) prepare_for_talos ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , output_dir = self . output_dir , raw_results_dir = self . raw_results_dir , )","title":"prepare"},{"location":"api/pheval_talos/runner/#src.pheval_talos.runner.TalosPhEvalRunner.run","text":"Run. Source code in src/pheval_talos/runner.py 34 35 36 37 38 39 def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) configurations = TALOSConfigurations . model_validate ( self . input_dir_config . tool_specific_configuration_options ) run_pipeline_per_sample ( input_dir = self . input_dir , testdata_dir = self . testdata_dir , raw_results_dir = self . raw_results_dir , apptainer = configurations . apptainer )","title":"run"},{"location":"api/pheval_talos/tool_specific_configuration_options/","text":"","title":"Tool specific configuration options"},{"location":"api/pheval_talos/prepare/create_cohort/","text":"create_cohort ( testdata_dir ) Creates a cohort by processing a phenopacket directory. Args: testdata_dir (Path): Path to the directory containing the phenopacket directory. Source code in src/pheval_talos/prepare/create_cohort.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def create_cohort ( testdata_dir : Path ) -> None : \"\"\" Creates a cohort by processing a phenopacket directory. Args: testdata_dir (Path): Path to the directory containing the phenopacket directory. \"\"\" phenopacket_dir = testdata_dir . joinpath ( \"phenopackets\" ) testdata_dir . joinpath ( \"cohort_phenopackets\" ) . mkdir ( exist_ok = True ) testdata_dir . joinpath ( \"pedigree\" ) . mkdir ( exist_ok = True ) for phenopacket_path in all_files ( phenopacket_dir ): testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf\" ) . mkdir ( exist_ok = True ) is_family = \"proband\" in json . load ( open ( phenopacket_path )) phenopacket = phenopacket_reader ( phenopacket_path ) vcf_file_name = Path ( PhenopacketUtil ( phenopacket ) . vcf_file_data ( phenopacket_path , testdata_dir . joinpath ( phenopacket_path . stem )) . uri ) . name testdata_dir . joinpath ( f \"vcf/ { vcf_file_name } \" ) . rename ( testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf/ { vcf_file_name } \" )) testdata_dir . joinpath ( f \"vcf/ { vcf_file_name } .tbi\" ) . rename ( testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf/ { vcf_file_name } .tbi\" )) cohort_name = phenopacket_path . stem cohort = Cohort ( id = cohort_name , description = f \"Phenotypic data from { cohort_name } \" , members = [], meta_data = MetaData ( created_by = \"TalosPhEvalRunner\" , resources = [ Resource ( id = \"hp\" , name = \"Human Phenotype Ontology\" , url = \"http://www.human-phenotype-ontology.org\" , version = \"2024-08-13\" , namespace_prefix = \"HP\" , iri_prefix = \"http://purl.obolibrary.org/obo/HP_\" , ), ], ), ) cohort . members . append ( extract_phenopacket ( phenopacket , is_family ), ) pedigree = create_pedigree_for_phenopacket ( phenopacket , is_family ) write_phenopacket ( cohort , testdata_dir . joinpath ( f \"cohort_phenopackets/ { phenopacket_path . name } \" )) with open ( testdata_dir . joinpath ( f \"pedigree/ { phenopacket_path . stem } .ped\" ), \"w\" ) as f : f . writelines ( pedigree ) create_pedigree_for_phenopacket ( phenopacket , is_family ) Generate a pedigree file content for a given Phenopacket or Family instance. Args: phenopacket (Phenopacket | Family): A Phenopacket or Family instance containing subject or pedigree data. pedigree (list[str]): List of strings representing pedigree entries. This list is modified in-place by appending new entries. Returns: list[str]: The updated pedigree list containing pedigree data in correctly formatted strings. Source code in src/pheval_talos/prepare/create_cohort.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def create_pedigree_for_phenopacket ( phenopacket : Phenopacket | Family , is_family : bool ) -> list [ str ]: \"\"\" Generate a pedigree file content for a given Phenopacket or Family instance. Args: phenopacket (Phenopacket | Family): A Phenopacket or Family instance containing subject or pedigree data. pedigree (list[str]): List of strings representing pedigree entries. This list is modified in-place by appending new entries. Returns: list[str]: The updated pedigree list containing pedigree data in correctly formatted strings. \"\"\" pedigree = [] if is_family : phenopacket_ped = phenopacket . pedigree for person in phenopacket_ped . persons : pedigree . append ( f \" { sanitise_id ( person . family_id ) } \\t { sanitise_id ( person . individual_id ) } \\t \" f \" { sanitise_id ( person . paternal_id ) } \\t { sanitise_id ( person . maternal_id ) } \\t \" f \" { sex_map_conversion . get ( phenopacket . subject . sex , 0 ) } \\t { person . affected_status } \\n \" ) return pedigree else : pedigree . append ( f \" { sanitise_id ( phenopacket . subject . id ) } _FAM \\t { sanitise_id ( phenopacket . subject . id ) } \\t \" f \"0 \\t 0 \\t \" f \" { sex_map_conversion . get ( phenopacket . subject . sex , 0 ) } \\t 2 \\n \" ) return pedigree extract_phenopacket ( phenopacket , is_family ) Extract phenotypic and subject information from a given phenopacket. Args: phenopacket : Phenopacket The phenopacket containing subject and phenotypic information. Returns: Phenopacket A new instance of Phenopacket containing extracted subject and phenotypic details. Source code in src/pheval_talos/prepare/create_cohort.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def extract_phenopacket ( phenopacket : Family | Phenopacket , is_family : bool ) -> Phenopacket : \"\"\" Extract phenotypic and subject information from a given phenopacket. Args: phenopacket : Phenopacket The phenopacket containing subject and phenotypic information. Returns: Phenopacket A new instance of Phenopacket containing extracted subject and phenotypic details. \"\"\" if is_family : return Phenopacket ( id = sanitise_id ( phenopacket . proband . subject . id ), subject = Individual ( id = phenopacket . id , sex = reported_sex_map . get ( phenopacket . proband . subject . sex , Sex . UNKNOWN_SEX ), ), phenotypic_features = list ( phenopacket . proband . phenotypic_features ), ) return Phenopacket ( id = sanitise_id ( phenopacket . subject . id ), subject = Individual ( id = sanitise_id ( phenopacket . id ) + \"_FAM\" , sex = reported_sex_map . get ( phenopacket . subject . sex , Sex . UNKNOWN_SEX ), ), phenotypic_features = list ( phenopacket . phenotypic_features ), ) sanitise_id ( s ) Make IDs safe for VCF/Hail: no spaces or slashes, only [A-Za-z0-9_.-]. Source code in src/pheval_talos/prepare/create_cohort.py 13 14 15 16 def sanitise_id ( s : str ) -> str : \"\"\"Make IDs safe for VCF/Hail: no spaces or slashes, only [A-Za-z0-9_.-].\"\"\" s = s . replace ( \"/\" , \"_\" ) . replace ( \" \" , \"_\" ) return re . sub ( r \"[^A-Za-z0-9_.-]\" , \"_\" , s )","title":"Create cohort"},{"location":"api/pheval_talos/prepare/create_cohort/#src.pheval_talos.prepare.create_cohort.create_cohort","text":"Creates a cohort by processing a phenopacket directory. Args: testdata_dir (Path): Path to the directory containing the phenopacket directory. Source code in src/pheval_talos/prepare/create_cohort.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def create_cohort ( testdata_dir : Path ) -> None : \"\"\" Creates a cohort by processing a phenopacket directory. Args: testdata_dir (Path): Path to the directory containing the phenopacket directory. \"\"\" phenopacket_dir = testdata_dir . joinpath ( \"phenopackets\" ) testdata_dir . joinpath ( \"cohort_phenopackets\" ) . mkdir ( exist_ok = True ) testdata_dir . joinpath ( \"pedigree\" ) . mkdir ( exist_ok = True ) for phenopacket_path in all_files ( phenopacket_dir ): testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf\" ) . mkdir ( exist_ok = True ) is_family = \"proband\" in json . load ( open ( phenopacket_path )) phenopacket = phenopacket_reader ( phenopacket_path ) vcf_file_name = Path ( PhenopacketUtil ( phenopacket ) . vcf_file_data ( phenopacket_path , testdata_dir . joinpath ( phenopacket_path . stem )) . uri ) . name testdata_dir . joinpath ( f \"vcf/ { vcf_file_name } \" ) . rename ( testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf/ { vcf_file_name } \" )) testdata_dir . joinpath ( f \"vcf/ { vcf_file_name } .tbi\" ) . rename ( testdata_dir . joinpath ( f \" { phenopacket_path . stem } _vcf/ { vcf_file_name } .tbi\" )) cohort_name = phenopacket_path . stem cohort = Cohort ( id = cohort_name , description = f \"Phenotypic data from { cohort_name } \" , members = [], meta_data = MetaData ( created_by = \"TalosPhEvalRunner\" , resources = [ Resource ( id = \"hp\" , name = \"Human Phenotype Ontology\" , url = \"http://www.human-phenotype-ontology.org\" , version = \"2024-08-13\" , namespace_prefix = \"HP\" , iri_prefix = \"http://purl.obolibrary.org/obo/HP_\" , ), ], ), ) cohort . members . append ( extract_phenopacket ( phenopacket , is_family ), ) pedigree = create_pedigree_for_phenopacket ( phenopacket , is_family ) write_phenopacket ( cohort , testdata_dir . joinpath ( f \"cohort_phenopackets/ { phenopacket_path . name } \" )) with open ( testdata_dir . joinpath ( f \"pedigree/ { phenopacket_path . stem } .ped\" ), \"w\" ) as f : f . writelines ( pedigree )","title":"create_cohort"},{"location":"api/pheval_talos/prepare/create_cohort/#src.pheval_talos.prepare.create_cohort.create_pedigree_for_phenopacket","text":"Generate a pedigree file content for a given Phenopacket or Family instance. Args: phenopacket (Phenopacket | Family): A Phenopacket or Family instance containing subject or pedigree data. pedigree (list[str]): List of strings representing pedigree entries. This list is modified in-place by appending new entries. Returns: list[str]: The updated pedigree list containing pedigree data in correctly formatted strings. Source code in src/pheval_talos/prepare/create_cohort.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def create_pedigree_for_phenopacket ( phenopacket : Phenopacket | Family , is_family : bool ) -> list [ str ]: \"\"\" Generate a pedigree file content for a given Phenopacket or Family instance. Args: phenopacket (Phenopacket | Family): A Phenopacket or Family instance containing subject or pedigree data. pedigree (list[str]): List of strings representing pedigree entries. This list is modified in-place by appending new entries. Returns: list[str]: The updated pedigree list containing pedigree data in correctly formatted strings. \"\"\" pedigree = [] if is_family : phenopacket_ped = phenopacket . pedigree for person in phenopacket_ped . persons : pedigree . append ( f \" { sanitise_id ( person . family_id ) } \\t { sanitise_id ( person . individual_id ) } \\t \" f \" { sanitise_id ( person . paternal_id ) } \\t { sanitise_id ( person . maternal_id ) } \\t \" f \" { sex_map_conversion . get ( phenopacket . subject . sex , 0 ) } \\t { person . affected_status } \\n \" ) return pedigree else : pedigree . append ( f \" { sanitise_id ( phenopacket . subject . id ) } _FAM \\t { sanitise_id ( phenopacket . subject . id ) } \\t \" f \"0 \\t 0 \\t \" f \" { sex_map_conversion . get ( phenopacket . subject . sex , 0 ) } \\t 2 \\n \" ) return pedigree","title":"create_pedigree_for_phenopacket"},{"location":"api/pheval_talos/prepare/create_cohort/#src.pheval_talos.prepare.create_cohort.extract_phenopacket","text":"Extract phenotypic and subject information from a given phenopacket. Args: phenopacket : Phenopacket The phenopacket containing subject and phenotypic information. Returns: Phenopacket A new instance of Phenopacket containing extracted subject and phenotypic details. Source code in src/pheval_talos/prepare/create_cohort.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def extract_phenopacket ( phenopacket : Family | Phenopacket , is_family : bool ) -> Phenopacket : \"\"\" Extract phenotypic and subject information from a given phenopacket. Args: phenopacket : Phenopacket The phenopacket containing subject and phenotypic information. Returns: Phenopacket A new instance of Phenopacket containing extracted subject and phenotypic details. \"\"\" if is_family : return Phenopacket ( id = sanitise_id ( phenopacket . proband . subject . id ), subject = Individual ( id = phenopacket . id , sex = reported_sex_map . get ( phenopacket . proband . subject . sex , Sex . UNKNOWN_SEX ), ), phenotypic_features = list ( phenopacket . proband . phenotypic_features ), ) return Phenopacket ( id = sanitise_id ( phenopacket . subject . id ), subject = Individual ( id = sanitise_id ( phenopacket . id ) + \"_FAM\" , sex = reported_sex_map . get ( phenopacket . subject . sex , Sex . UNKNOWN_SEX ), ), phenotypic_features = list ( phenopacket . phenotypic_features ), )","title":"extract_phenopacket"},{"location":"api/pheval_talos/prepare/create_cohort/#src.pheval_talos.prepare.create_cohort.sanitise_id","text":"Make IDs safe for VCF/Hail: no spaces or slashes, only [A-Za-z0-9_.-]. Source code in src/pheval_talos/prepare/create_cohort.py 13 14 15 16 def sanitise_id ( s : str ) -> str : \"\"\"Make IDs safe for VCF/Hail: no spaces or slashes, only [A-Za-z0-9_.-].\"\"\" s = s . replace ( \"/\" , \"_\" ) . replace ( \" \" , \"_\" ) return re . sub ( r \"[^A-Za-z0-9_.-]\" , \"_\" , s )","title":"sanitise_id"},{"location":"api/pheval_talos/prepare/edit_next_flow_configs/","text":"edit_annotation_config ( input_dir , testdata_dir , output_dir , raw_results_dir ) Edit the annotation configuration file for a specified cohort by updating Nextflow parameters in the configuration file located in the provided input directory. Args: input_dir: Path to the input directory containing the annotation.config file which needs to be updated. testdata_dir: Path to the directory containing test data. The directory's name is used as the cohort name, and its vcf sub-directory is used as the input for VCF data. output_dir: Path to the output directory where the cohort data will be processed. raw_results_dir: Path to the directory where the raw results will be stored. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def edit_annotation_config ( input_dir : Path , testdata_dir : Path , output_dir : Path , raw_results_dir : Path ) -> None : \"\"\" Edit the annotation configuration file for a specified cohort by updating Nextflow parameters in the configuration file located in the provided input directory. Args: input_dir: Path to the input directory containing the `annotation.config` file which needs to be updated. testdata_dir: Path to the directory containing test data. The directory's name is used as the cohort name, and its `vcf` sub-directory is used as the input for VCF data. output_dir: Path to the output directory where the cohort data will be processed. raw_results_dir: Path to the directory where the raw results will be stored. Returns: None \"\"\" annotation_config = input_dir . joinpath ( \"nextflow/annotation.config\" ) testdata_dir . joinpath ( \"nextflow_config\" ) . mkdir ( exist_ok = True ) for cohort_phenopacket_path in all_files ( testdata_dir . joinpath ( \"cohort_phenopackets\" )): update_nextflow_params ( annotation_config , { \"cohort\" : cohort_phenopacket_path . stem , \"input_vcf_dir\" : testdata_dir . joinpath ( f \" { cohort_phenopacket_path . stem } _vcf\" ), \"cohort_output_dir\" : raw_results_dir , \"processed_annotations\" : output_dir . joinpath ( \"processed_annotations\" ), \"large_files\" : input_dir . joinpath ( \"large_files\" ), }, testdata_dir . joinpath ( f \"nextflow_config/ { cohort_phenopacket_path . stem } _annotation.config\" ) ) edit_talos_config ( input_dir , testdata_dir , output_dir , raw_results_dir ) Update the Talos config file with provided parameters. Parameters: input_dir (Path): Directory containing the input files and Talos configuration. testdata_dir (Path): Directory containing the test data to be used in the Talos pipeline. output_dir (Path): Directory for storing processed annotations and results. raw_results_dir (Path): Directory for storing raw results generated by Talos. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def edit_talos_config ( input_dir : Path , testdata_dir : Path , output_dir : Path , raw_results_dir : Path ) -> None : \"\"\" Update the Talos config file with provided parameters. Parameters: input_dir (Path): Directory containing the input files and Talos configuration. testdata_dir (Path): Directory containing the test data to be used in the Talos pipeline. output_dir (Path): Directory for storing processed annotations and results. raw_results_dir (Path): Directory for storing raw results generated by Talos. Returns: None \"\"\" talos_config = input_dir . joinpath ( \"nextflow/talos.config\" ) for cohort_phenopacket_path in all_files ( testdata_dir . joinpath ( \"cohort_phenopackets\" )): update_nextflow_params ( talos_config , { \"cohort\" : cohort_phenopacket_path . stem , \"input_dir\" : testdata_dir , \"pedigree\" : f '$ {{ params.input_dir }} /pedigree/ { cohort_phenopacket_path . stem } .ped' , \"output_dir\" : raw_results_dir , \"processed_annotations\" : output_dir . joinpath ( \"processed_annotations\" ), \"large_files\" : input_dir . joinpath ( \"large_files\" ), }, testdata_dir . joinpath ( f \"nextflow_config/ { cohort_phenopacket_path . stem } _talos.config\" ) ) update_nextflow_params ( config_path , updates , output_path ) Update specific parameters in a Nextflow configuration file. Args: config_path: Path The path to the Nextflow configuration file that needs to be updated. updates: dict[str, str] A dictionary where keys represent parameter names ( param_name ) to search for, and values are their corresponding new values. output_path: Path The path to write the configuration file Raises: ValueError If a parameter specified in updates cannot be found in the configuration file. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def update_nextflow_params ( config_path : Path , updates : dict [ str , str ], output_path : Path ) -> None : \"\"\" Update specific parameters in a Nextflow configuration file. Args: config_path: Path The path to the Nextflow configuration file that needs to be updated. updates: dict[str, str] A dictionary where keys represent parameter names (`param_name`) to search for, and values are their corresponding new values. output_path: Path The path to write the configuration file Raises: ValueError If a parameter specified in `updates` cannot be found in the configuration file. Returns: None \"\"\" content = config_path . read_text () for param_name , new_value in updates . items (): pattern = rf '^(params\\. { re . escape ( param_name ) } \\s*=\\s*\")[^\"]*(\")' replacement = rf \"\\1 { new_value } \\2\" content , count = re . subn ( pattern , replacement , content , flags = re . MULTILINE ) if count == 0 : raise ValueError ( f \"Could not find param `params. { param_name } ` to update.\" ) logger . info ( f 'Updated `params. { param_name } ` to \" { new_value } \"' ) output_path . write_text ( content )","title":"Edit next flow configs"},{"location":"api/pheval_talos/prepare/edit_next_flow_configs/#src.pheval_talos.prepare.edit_next_flow_configs.edit_annotation_config","text":"Edit the annotation configuration file for a specified cohort by updating Nextflow parameters in the configuration file located in the provided input directory. Args: input_dir: Path to the input directory containing the annotation.config file which needs to be updated. testdata_dir: Path to the directory containing test data. The directory's name is used as the cohort name, and its vcf sub-directory is used as the input for VCF data. output_dir: Path to the output directory where the cohort data will be processed. raw_results_dir: Path to the directory where the raw results will be stored. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def edit_annotation_config ( input_dir : Path , testdata_dir : Path , output_dir : Path , raw_results_dir : Path ) -> None : \"\"\" Edit the annotation configuration file for a specified cohort by updating Nextflow parameters in the configuration file located in the provided input directory. Args: input_dir: Path to the input directory containing the `annotation.config` file which needs to be updated. testdata_dir: Path to the directory containing test data. The directory's name is used as the cohort name, and its `vcf` sub-directory is used as the input for VCF data. output_dir: Path to the output directory where the cohort data will be processed. raw_results_dir: Path to the directory where the raw results will be stored. Returns: None \"\"\" annotation_config = input_dir . joinpath ( \"nextflow/annotation.config\" ) testdata_dir . joinpath ( \"nextflow_config\" ) . mkdir ( exist_ok = True ) for cohort_phenopacket_path in all_files ( testdata_dir . joinpath ( \"cohort_phenopackets\" )): update_nextflow_params ( annotation_config , { \"cohort\" : cohort_phenopacket_path . stem , \"input_vcf_dir\" : testdata_dir . joinpath ( f \" { cohort_phenopacket_path . stem } _vcf\" ), \"cohort_output_dir\" : raw_results_dir , \"processed_annotations\" : output_dir . joinpath ( \"processed_annotations\" ), \"large_files\" : input_dir . joinpath ( \"large_files\" ), }, testdata_dir . joinpath ( f \"nextflow_config/ { cohort_phenopacket_path . stem } _annotation.config\" ) )","title":"edit_annotation_config"},{"location":"api/pheval_talos/prepare/edit_next_flow_configs/#src.pheval_talos.prepare.edit_next_flow_configs.edit_talos_config","text":"Update the Talos config file with provided parameters. Parameters: input_dir (Path): Directory containing the input files and Talos configuration. testdata_dir (Path): Directory containing the test data to be used in the Talos pipeline. output_dir (Path): Directory for storing processed annotations and results. raw_results_dir (Path): Directory for storing raw results generated by Talos. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def edit_talos_config ( input_dir : Path , testdata_dir : Path , output_dir : Path , raw_results_dir : Path ) -> None : \"\"\" Update the Talos config file with provided parameters. Parameters: input_dir (Path): Directory containing the input files and Talos configuration. testdata_dir (Path): Directory containing the test data to be used in the Talos pipeline. output_dir (Path): Directory for storing processed annotations and results. raw_results_dir (Path): Directory for storing raw results generated by Talos. Returns: None \"\"\" talos_config = input_dir . joinpath ( \"nextflow/talos.config\" ) for cohort_phenopacket_path in all_files ( testdata_dir . joinpath ( \"cohort_phenopackets\" )): update_nextflow_params ( talos_config , { \"cohort\" : cohort_phenopacket_path . stem , \"input_dir\" : testdata_dir , \"pedigree\" : f '$ {{ params.input_dir }} /pedigree/ { cohort_phenopacket_path . stem } .ped' , \"output_dir\" : raw_results_dir , \"processed_annotations\" : output_dir . joinpath ( \"processed_annotations\" ), \"large_files\" : input_dir . joinpath ( \"large_files\" ), }, testdata_dir . joinpath ( f \"nextflow_config/ { cohort_phenopacket_path . stem } _talos.config\" ) )","title":"edit_talos_config"},{"location":"api/pheval_talos/prepare/edit_next_flow_configs/#src.pheval_talos.prepare.edit_next_flow_configs.update_nextflow_params","text":"Update specific parameters in a Nextflow configuration file. Args: config_path: Path The path to the Nextflow configuration file that needs to be updated. updates: dict[str, str] A dictionary where keys represent parameter names ( param_name ) to search for, and values are their corresponding new values. output_path: Path The path to write the configuration file Raises: ValueError If a parameter specified in updates cannot be found in the configuration file. Returns: None Source code in src/pheval_talos/prepare/edit_next_flow_configs.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def update_nextflow_params ( config_path : Path , updates : dict [ str , str ], output_path : Path ) -> None : \"\"\" Update specific parameters in a Nextflow configuration file. Args: config_path: Path The path to the Nextflow configuration file that needs to be updated. updates: dict[str, str] A dictionary where keys represent parameter names (`param_name`) to search for, and values are their corresponding new values. output_path: Path The path to write the configuration file Raises: ValueError If a parameter specified in `updates` cannot be found in the configuration file. Returns: None \"\"\" content = config_path . read_text () for param_name , new_value in updates . items (): pattern = rf '^(params\\. { re . escape ( param_name ) } \\s*=\\s*\")[^\"]*(\")' replacement = rf \"\\1 { new_value } \\2\" content , count = re . subn ( pattern , replacement , content , flags = re . MULTILINE ) if count == 0 : raise ValueError ( f \"Could not find param `params. { param_name } ` to update.\" ) logger . info ( f 'Updated `params. { param_name } ` to \" { new_value } \"' ) output_path . write_text ( content )","title":"update_nextflow_params"},{"location":"api/pheval_talos/prepare/prepare/","text":"","title":"Prepare"},{"location":"api/pheval_talos/run/run/","text":"run_annotation ( input_dir , testdata_dir , phenopacket_path , apptainer ) Run the annotation process using Nextflow. Args: input_dir (Path): The directory containing the necessary Nextflow workflow and configuration files for the annotation process. testdata_dir (Path): The testdata directory. phenopacket_path (Path): The path to the phenopacket. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None Source code in src/pheval_talos/run/run.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def run_annotation ( input_dir : Path , testdata_dir : Path , phenopacket_path : Path , apptainer : bool ) -> None : \"\"\" Run the annotation process using Nextflow. Args: input_dir (Path): The directory containing the necessary Nextflow workflow and configuration files for the annotation process. testdata_dir (Path): The testdata directory. phenopacket_path (Path): The path to the phenopacket. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None \"\"\" cmd = [ \"nextflow\" , \"-c\" , f \" { testdata_dir } /nextflow_config/ { phenopacket_path . stem } _annotation.config\" , \"run\" , f \" { input_dir } /nextflow/annotation.nf\" , ] if apptainer : cmd += [ \"-with-singularity\" , f \" { input_dir } /talos.sif\" ] subprocess . run ( cmd , check = False , shell = False , ) run_talos ( input_dir , testdata_dir , phenopacket_path , raw_results_dir , apptainer ) Run the Talos Nextflow pipeline. Args: input_dir (Path): The directory containing the Talos Nextflow configuration and pipeline script. testdata_dir (Path): The directory containing the phenopackets file for the cohort data. phenopacket_path (Path): The path to the phenopacket. raw_results_dir (Path): The raw results directory. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None Source code in src/pheval_talos/run/run.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def run_talos ( input_dir : Path , testdata_dir : Path , phenopacket_path : Path , raw_results_dir : Path , apptainer : bool ) -> None : \"\"\" Run the Talos Nextflow pipeline. Args: input_dir (Path): The directory containing the Talos Nextflow configuration and pipeline script. testdata_dir (Path): The directory containing the phenopackets file for the cohort data. phenopacket_path (Path): The path to the phenopacket. raw_results_dir (Path): The raw results directory. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None \"\"\" cmd = [ \"nextflow\" , \"-c\" , f \" { testdata_dir } /nextflow_config/ { phenopacket_path . stem } _talos.config\" , \"run\" , f \" { input_dir } /nextflow/talos.nf\" , \"--matrix_table\" , f \" { raw_results_dir } / { phenopacket_path . stem } .mt\" , f \"--phenopackets { phenopacket_path } \" , ] if apptainer : cmd += [ \"-with-singularity\" , f \" { input_dir } /talos.sif\" ] subprocess . run ( cmd , check = False , )","title":"Run"},{"location":"api/pheval_talos/run/run/#src.pheval_talos.run.run.run_annotation","text":"Run the annotation process using Nextflow. Args: input_dir (Path): The directory containing the necessary Nextflow workflow and configuration files for the annotation process. testdata_dir (Path): The testdata directory. phenopacket_path (Path): The path to the phenopacket. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None Source code in src/pheval_talos/run/run.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def run_annotation ( input_dir : Path , testdata_dir : Path , phenopacket_path : Path , apptainer : bool ) -> None : \"\"\" Run the annotation process using Nextflow. Args: input_dir (Path): The directory containing the necessary Nextflow workflow and configuration files for the annotation process. testdata_dir (Path): The testdata directory. phenopacket_path (Path): The path to the phenopacket. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None \"\"\" cmd = [ \"nextflow\" , \"-c\" , f \" { testdata_dir } /nextflow_config/ { phenopacket_path . stem } _annotation.config\" , \"run\" , f \" { input_dir } /nextflow/annotation.nf\" , ] if apptainer : cmd += [ \"-with-singularity\" , f \" { input_dir } /talos.sif\" ] subprocess . run ( cmd , check = False , shell = False , )","title":"run_annotation"},{"location":"api/pheval_talos/run/run/#src.pheval_talos.run.run.run_talos","text":"Run the Talos Nextflow pipeline. Args: input_dir (Path): The directory containing the Talos Nextflow configuration and pipeline script. testdata_dir (Path): The directory containing the phenopackets file for the cohort data. phenopacket_path (Path): The path to the phenopacket. raw_results_dir (Path): The raw results directory. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None Source code in src/pheval_talos/run/run.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def run_talos ( input_dir : Path , testdata_dir : Path , phenopacket_path : Path , raw_results_dir : Path , apptainer : bool ) -> None : \"\"\" Run the Talos Nextflow pipeline. Args: input_dir (Path): The directory containing the Talos Nextflow configuration and pipeline script. testdata_dir (Path): The directory containing the phenopackets file for the cohort data. phenopacket_path (Path): The path to the phenopacket. raw_results_dir (Path): The raw results directory. apptainer (bool): Whether to use apptainer to run the workflow. Returns: None \"\"\" cmd = [ \"nextflow\" , \"-c\" , f \" { testdata_dir } /nextflow_config/ { phenopacket_path . stem } _talos.config\" , \"run\" , f \" { input_dir } /nextflow/talos.nf\" , \"--matrix_table\" , f \" { raw_results_dir } / { phenopacket_path . stem } .mt\" , f \"--phenopackets { phenopacket_path } \" , ] if apptainer : cmd += [ \"-with-singularity\" , f \" { input_dir } /talos.sif\" ] subprocess . run ( cmd , check = False , )","title":"run_talos"}]}