import re
from pathlib import Path

from pheval.utils.logger import get_logger

logger = get_logger()


def update_nextflow_params(config_path: Path, updates: dict[str, str]) -> None:
    """
    Update specific parameters in a Nextflow configuration file.
    Args:
        config_path: Path
            The path to the Nextflow configuration file that needs to be updated.
        updates: dict[str, str]
            A dictionary where keys represent parameter names (`param_name`) to search for,
            and values are their corresponding new values.
    Raises:
        ValueError
            If a parameter specified in `updates` cannot be found in the configuration file.
    Returns:
        None
    """
    content = config_path.read_text()
    for param_name, new_value in updates.items():
        pattern = rf'^(params\.{re.escape(param_name)}\s*=\s*")[^"]*(")'
        replacement = rf"\1{new_value}\2"
        content, count = re.subn(pattern, replacement, content, flags=re.MULTILINE)
        if count == 0:
            raise ValueError(f"Could not find param `params.{param_name}` to update.")
        logger.info(f'Updated `params.{param_name}` to "{new_value}"')
    config_path.write_text(content)


def edit_annotation_config(input_dir: Path, testdata_dir: Path, output_dir: Path, raw_results_dir: Path) -> None:
    """
    Edit the annotation configuration file for a specified cohort by updating
    Nextflow parameters in the configuration file located in the provided input
    directory.
    Args:
        input_dir: Path to the input directory containing the `annotation.config`
            file which needs to be updated.
        testdata_dir: Path to the directory containing test data. The directory's
            name is used as the cohort name, and its `vcf` sub-directory is used as
            the input for VCF data.
        output_dir: Path to the output directory where the cohort data will be
            processed.
        raw_results_dir: Path to the directory where the raw results will be stored.
    Returns:
        None
    """
    annotation_config = input_dir.joinpath("nextflow/annotation.config")
    update_nextflow_params(
        annotation_config,
        {
            "cohort": testdata_dir.name,
            "input_vcf_dir": testdata_dir.joinpath("vcf"),
            "cohort_output_dir": raw_results_dir,
            "processed_annotations": output_dir.joinpath("processed_annotations"),
            "large_files": input_dir.joinpath("large_files"),
        },
    )


def edit_talos_config(input_dir: Path, testdata_dir: Path, output_dir: Path, raw_results_dir: Path) -> None:
    """
    Update the Talos config file with provided parameters.
    Parameters:
        input_dir (Path): Directory containing the input files and Talos configuration.
        testdata_dir (Path): Directory containing the test data to be used in the Talos pipeline.
        output_dir (Path): Directory for storing processed annotations and results.
        raw_results_dir (Path): Directory for storing raw results generated by Talos.
    Returns:
        None
    """
    talos_config = input_dir.joinpath("nextflow/talos.config")
    update_nextflow_params(
        talos_config,
        {
            "cohort": testdata_dir.name,
            "input_dir": testdata_dir,
            "pedigree": "${params.input_dir}/pedigree.ped",
            "output_dir": raw_results_dir,
            "processed_annotations": output_dir.joinpath("processed_annotations"),
            "large_files": input_dir.joinpath("large_files"),
        },
    )
